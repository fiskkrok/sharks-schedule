import React,
{ useState, useEffect
} from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer
} from 'recharts';
import { Search, Filter, RefreshCcw
} from 'lucide-react';

const ComparisonSelect = ({ onSelect, type, currentValue
}) => {
  const [isOpen, setIsOpen
    ] = useState(false);

  const options = {
    team: [
            { label: 'Team Defensemen', value: 'team'
            },
            { label: 'League Average', value: 'league_avg'
            },
            { label: 'Top 10 Defensemen', value: 'top_10'
            }
        ]
    };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)
    }
        className="w-full px-4 py-2 text-left bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm"
      >
        <span className="text-sm text-gray-900 dark:text-white">
          {options[type
        ].find(opt => opt.value === currentValue)?.label
    }
        </span>
      </button>

      {isOpen && (
        <div className="absolute z-10 w-full mt-2 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg">
          {options[type
            ].map(option => (
            <button
              key={option.value
            }
              onClick={() => {
                onSelect(option.value);
                setIsOpen(false);
                }
            }
              className="w-full px-4 py-2 text-left text-sm hover:bg-gray-100 dark:hover:bg-gray-700"
            >
              {option.label
            }
            </button>
          ))
        }
        </div>
      )
    }
    </div>
  );
};

const StatComparison = ({ title, playerValue, comparisonValue, isHigherBetter = true
}) => {
  const difference = playerValue - comparisonValue;
  const isPositive = isHigherBetter ? difference > 0 : difference < 0;

  return (
    <div className="flex items-center justify-between p-4 bg-white dark:bg-gray-800 rounded-lg shadow">
      <div>
        <span className="text-sm text-gray-500 dark:text-gray-400">{title
    }</span>
        <div className="mt-1 font-semibold text-gray-900 dark:text-white">
          {playerValue.toFixed(1)
    } vs {comparisonValue.toFixed(1)
    }
        </div>
      </div>
      <div className={`text-sm font-medium ${isPositive ? 'text-green-500' : 'text-red-500'
        }`
    }>
        {difference > 0 ? '+' : ''
    }{difference.toFixed(1)
    }
      </div>
    </div>
  );
};

const ComparisonChart = ({ data, metric
}) => (
  <div className="h-[300px] w-full">
    <ResponsiveContainer>
      <BarChart data={data
}>
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="name" />
        <YAxis />
        <Tooltip />
        <Legend />
        <Bar dataKey={metric
} fill="#0d9488" />
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const Comparisons = ({ playerData
}) => {
  const [comparisonType, setComparisonType
    ] = useState('team');
  const [comparisonData, setComparisonData
    ] = useState(null);
  const [loading, setLoading
    ] = useState(false);

  // Fetch comparison data based on selected type
  useEffect(() => {
    const fetchComparisonData = async () => {
      setLoading(true);
      try {
                // This would be replaced with actual API calls
        const mockComparisonData = {
          team: {
            avgPointsPerGame: 0.45,
            avgTimeOnIce: 18.5,
            plusMinus: 5,
            shotBlocks: 45
                    }
                };
        
        setComparisonData(mockComparison